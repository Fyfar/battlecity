// Generated by CoffeeScript 1.9.1
(function() {
  var Brick, GUI, HardBrick, Player, Tank, gui, level1,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  GUI = (function() {
    function GUI() {
      this.cellSize = 44;
      this.paper = Snap(16 * this.cellSize, 15 * this.cellSize);
      this.tree = new QuadTree(0, {
        x: 0,
        y: 0,
        width: 16 * this.cellSize,
        height: 15 * this.cellSize
      });
      this._bindEvents();
      this._init();
    }

    GUI.prototype._init = function() {
      this.paper.rect(0, 0, 16 * this.cellSize, 15 * this.cellSize).attr({
        fill: '#ccc'
      });
      return this.paper.rect(this.cellSize, this.cellSize, this.size = 13 * this.cellSize, this.size).attr({
        fill: '#000'
      });
    };

    GUI.prototype.drawLevel = function(level) {
      var brick, i, j, k, l, ref, ref1, x, y;
      for (i = k = 0, ref = level.length; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
        for (j = l = 0, ref1 = level[0].length; 0 <= ref1 ? l < ref1 : l > ref1; j = 0 <= ref1 ? ++l : --l) {
          if (level[i][j] === 0) {
            continue;
          }
          x = j * this.cellSize / 2 + this.cellSize;
          y = i * this.cellSize / 2 + this.cellSize;
          if (level[i][j] === 1) {
            brick = new Brick(x, y, this.cellSize, this.paper);
          } else if (level[i][j]) {
            brick = new HardBrick(x, y, this.cellSize, this.paper);
          }
          brick.draw();
          this.tree.insert(brick);
        }
      }
      return new Player(this.paper, this.cellSize, 'Player1', this.tree).drawTank();
    };

    GUI.prototype._bindEvents = function() {
      return window.addEventListener('resize', (function(_this) {
        return function() {
          return _this.paper.attr({
            width: window.innerHeight,
            height: window.innerHeight
          });
        };
      })(this));
    };

    return GUI;

  })();

  Brick = (function() {
    function Brick(x, y, cellSize, paper) {
      this.x = x;
      this.y = y;
      this.width = this.height = cellSize / 2;
      this.paper = paper;
    }

    Brick.prototype.draw = function() {
      var brick;
      brick = this.paper.g();
      brick.add(this.paper.rect(this.x, this.y, this.width, this.height).attr({
        fill: '#ffa500'
      }));
      brick.add(this.paper.rect(this.x, this.y, this.width, this.height / 8).attr({
        fill: '#cd8500'
      }));
      brick.add(this.paper.rect(this.x, this.y + this.width / 2, this.width, this.height / 8).attr({
        fill: '#cd8500'
      }));
      brick.add(this.paper.rect(this.x + this.width / 2, this.y, this.width / 8, this.height / 2).attr({
        fill: '#cd8500'
      }));
      brick.add(this.paper.rect(this.x + this.width / 8, this.y + this.width / 2, this.width / 8, this.height / 2).attr({
        fill: '#cd8500'
      }));
      brick.add(this.paper.rect(this.x, this.y + this.width / 2 - this.width / 8, this.width, this.height / 8).attr({
        fill: '#d3d3d3'
      }));
      brick.add(this.paper.rect(this.x, this.y + this.width - this.width / 8, this.width, this.height / 8).attr({
        fill: '#d3d3d3'
      }));
      brick.add(this.paper.rect(this.x + this.width / 2 - this.width / 8, this.y, this.width / 8, this.height / 2).attr({
        fill: '#d3d3d3'
      }));
      brick.add(this.paper.rect(this.x, this.y + this.width / 2 - this.width / 8, this.width / 8, this.height / 2).attr({
        fill: '#d3d3d3'
      }));
      return brick;
    };

    return Brick;

  })();

  HardBrick = (function(superClass) {
    extend(HardBrick, superClass);

    function HardBrick() {
      return HardBrick.__super__.constructor.apply(this, arguments);
    }

    HardBrick.prototype.draw = function() {
      var brick, path;
      brick = this.paper.g();
      brick.add(this.paper.rect(this.x, this.y, this.width, this.height).attr({
        fill: '#ccc'
      }));
      path = 'M' + this.x + ', ' + (this.y + this.height) + ' L' + (this.x + this.width) + ', ' + (this.y + this.height) + ', ' + (this.x + this.width) + ', ' + this.y + ' Z';
      brick.add(this.paper.path(path).attr({
        fill: '#909090'
      }));
      brick.add(this.paper.rect(this.x + this.width / 4, this.y + this.width / 4, this.width / 2, this.height / 2).attr({
        fill: '#eee'
      }));
      return brick;
    };

    return HardBrick;

  })(Brick);

  Tank = (function() {
    function Tank(paper, cellSize, name, tree) {
      this.area = paper.svg(cellSize, cellSize, cellSize - 1, cellSize - 1);
      this.paper = paper;
      this.name = name;
      this.cellSize = cellSize;
      this.coords = {
        x: this.cellSize / 2,
        y: this.cellSize / 2
      };
      this.tank = this.area.g();
      this.tank.coords = {
        x: +this.area.attr('x'),
        y: +this.area.attr('y'),
        width: this.cellSize - 3,
        height: this.cellSize - 3
      };
      this.direction = 2;
      this.tree = tree;
      this.mapSize = {
        min: this.cellSize,
        max: 13 * this.cellSize
      };
      this.bricks = [];
      this._bindEvents();
    }

    Tank.prototype.update = function() {
      this.tank.coords.x = +this.area.attr('x');
      return this.tank.coords.y = +this.area.attr('y');
    };

    Tank.prototype._checkCollision = function(obj1, obj2) {
      var height1, height2, width1, width2, x1, x2, y1, y2;
      x1 = obj1.x;
      y1 = obj1.y;
      width1 = obj1.width;
      height1 = obj1.height;
      x2 = obj2.x;
      y2 = obj2.y;
      width2 = obj2.width;
      height2 = obj2.height;
      switch (this.direction) {
        case 1:
          if (x2 >= x1 + width1) {
            return false;
          }
          break;
        case 2:
          if (y2 >= y1 + height1) {
            return false;
          }
          break;
        case 3:
          if (x2 + width2 <= x1) {
            return false;
          }
          break;
        case 4:
          if (y2 + height2 <= y1) {
            return false;
          }
      }
      return ((x1 + width1 >= x2) && (x1 <= x2 + width2)) && ((y1 + height1 >= y2) && (y1 <= y2 + height2));
    };

    return Tank;

  })();

  Player = (function(superClass) {
    extend(Player, superClass);

    function Player() {
      return Player.__super__.constructor.apply(this, arguments);
    }

    Player.prototype.moveLeft = function() {
      var brick, k, len, ref;
      this.tank.attr({
        transform: 'r-90, ' + this.coords.x + ', ' + this.coords.y
      });
      this.direction = 1;
      if (this.area.attr('x') > this.mapSize.min) {
        this.update();
        this.bricks.length = 0;
        this.tree.retrieve(this.bricks, this.tank.coords);
        ref = this.bricks;
        for (k = 0, len = ref.length; k < len; k++) {
          brick = ref[k];
          if (!!this._checkCollision(brick, this.tank.coords)) {
            return;
          }
        }
        return this.area.attr({
          x: '-= 4'
        });
      }
    };

    Player.prototype.moveRight = function() {
      var brick, k, len, ref;
      if (this.direction !== 3) {
        this.tank.attr({
          transform: 'r90, ' + this.coords.x + ', ' + this.coords.y
        });
        this.direction = 3;
      }
      if (this.area.attr('x') < this.mapSize.max) {
        this.update();
        this.bricks.length = 0;
        this.tree.retrieve(this.bricks, this.tank.coords);
        ref = this.bricks;
        for (k = 0, len = ref.length; k < len; k++) {
          brick = ref[k];
          if (!!this._checkCollision(brick, this.tank.coords)) {
            return;
          }
        }
        return this.area.attr({
          x: '+= 4'
        });
      }
    };

    Player.prototype.moveUp = function() {
      var brick, k, len, ref;
      this.tank.attr({
        transform: 'r0, ' + this.coords.x + ', ' + this.coords.y
      });
      this.direction = 2;
      if (this.area.attr('y') > this.mapSize.min) {
        this.update();
        this.bricks.length = 0;
        this.tree.retrieve(this.bricks, this.tank.coords);
        ref = this.bricks;
        for (k = 0, len = ref.length; k < len; k++) {
          brick = ref[k];
          if (!!this._checkCollision(brick, this.tank.coords)) {
            return;
          }
        }
        return this.area.attr({
          y: '-= 4'
        });
      }
    };

    Player.prototype.moveDown = function() {
      var brick, k, len, ref;
      this.tank.attr({
        transform: 'r180, ' + this.coords.x + ', ' + this.coords.y
      });
      this.direction = 4;
      if (this.area.attr('y') < this.mapSize.max) {
        this.update();
        this.bricks.length = 0;
        this.tree.retrieve(this.bricks, this.tank.coords);
        ref = this.bricks;
        for (k = 0, len = ref.length; k < len; k++) {
          brick = ref[k];
          if (!!this._checkCollision(brick, this.tank.coords)) {
            return;
          }
        }
        return this.area.attr({
          y: '+= 4'
        });
      }
    };

    Player.prototype.shot = function() {
      var bullet;
      bullet = this.paper.circle(+this.area.attr('x') + this.coords.x - 2, +this.area.attr('y') + this.coords.y, 2);
      bullet.attr({
        fill: '#fff'
      });
      switch (this.direction) {
        case 1:
          return bullet.animate({
            cx: this.cellSize
          }, 1000, mina.linear, this._checkForKill);
        case 2:
          return bullet.animate({
            cy: this.cellSize
          }, 1000, mina.linear, this._checkForKill);
        case 3:
          return bullet.animate({
            cx: 14 * this.cellSize
          }, 1000, mina.linear, this._checkForKill);
        case 4:
          return bullet.animate({
            cy: 14 * this.cellSize
          }, 1000, mina.linear, this._checkForKill);
      }
    };

    Player.prototype._checkForKill = function() {
      return this.remove();
    };

    Player.prototype.drawTank = function() {
      var body, leftTrack, rightTrack;
      leftTrack = this._drawTrack(0, 0, 'left');
      body = this._drawTankBody(20, 25);
      rightTrack = this._drawTrack(30, 0, 'right');
      return this.tank.add(leftTrack, body, rightTrack);
    };

    Player.prototype._drawTrack = function(x, y, way) {
      var i, k, main, ref, ref1, ref2, track, trackLine;
      track = this.area.g();
      main = this.area.rect(x, y + this.cellSize / 8, 10, this.cellSize);
      main.attr({
        fill: '#ccc'
      });
      track.add(main);
      if (way === 'right') {
        x += 5;
      }
      for (i = k = ref = 2 + y, ref1 = y + this.cellSize, ref2 = this.cellSize / 8; ref2 > 0 ? k < ref1 : k > ref1; i = k += ref2) {
        trackLine = this.area.rect(x, i + this.cellSize / 8, 5, 1);
        trackLine.attr({
          fill: '#0000b2'
        });
        track.add(trackLine);
      }
      return track;
    };

    Player.prototype._drawTankBody = function(x, y) {
      var gun, main, redPoint, top;
      main = this.area.ellipse(x, y, 14, 18);
      main.attr({
        fill: '#ccc'
      });
      top = this.area.ellipse(x, y, 9, 13);
      top.attr({
        fill: '#e2e2e2'
      });
      gun = this.area.rect(x - 1, y - 23, 2, 11);
      gun.attr({
        fill: '#e2e2e2'
      });
      redPoint = this.area.rect(x - 1, y - 25, 2, 2);
      redPoint.attr({
        fill: '#b20000'
      });
      return this.area.g(main, top, gun, redPoint);
    };

    Player.prototype._bindEvents = function() {
      var press;
      press = [];
      document.addEventListener('keypress', (function(_this) {
        return function(e) {
          switch (e.keyCode) {
            case 97:
              return _this.moveLeft();
            case 100:
              return _this.moveRight();
            case 119:
              return _this.moveUp();
            case 115:
              return _this.moveDown();
            case 32:
              if (press['32'] === null) {
                _this.shot();
                return press['32'] = true;
              }
          }
        };
      })(this));
      return document.addEventListener('keyup', (function(_this) {
        return function(e) {
          if (e.keyCode === 32) {
            return press['32'] = null;
          }
        };
      })(this));
    };

    return Player;

  })(Tank);

  gui = new GUI;

  level1 = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 2, 2, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 2, 2, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1], [2, 2, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 2, 2], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]];

  gui.drawLevel(level1);

}).call(this);

//# sourceMappingURL=index.js.map
