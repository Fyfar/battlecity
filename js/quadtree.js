// Generated by CoffeeScript 1.9.1
(function() {
  var QuadTree;

  QuadTree = (function() {
    function QuadTree(pLevel, svg) {
      this.level = pLevel;
      this.bounds = svg;
      this._maxObjects = 15;
      this._maxLevels = 5;
      this.objects = [];
      this.nodes = [];
    }

    QuadTree.prototype.clear = function() {
      var j, len, node, ref, results;
      this.objects.length = 0;
      ref = this.nodes;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        node = ref[j];
        if (node !== null) {
          node.clear();
          results.push(node = null);
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    QuadTree.prototype._split = function() {
      var subHeight, subWidth, x, y;
      subWidth = this.bounds.width / 2;
      subHeight = this.bounds.height / 2;
      x = this.bounds.x;
      y = this.bounds.y;
      this.nodes[0] = new QuadTree(this.level + 1, {
        x: x + subWidth,
        y: y,
        width: subWidth,
        height: subHeight
      });
      this.nodes[1] = new QuadTree(this.level + 1, {
        x: x,
        y: y,
        width: subWidth,
        height: subHeight
      });
      this.nodes[2] = new QuadTree(this.level + 1, {
        x: x,
        y: y + subHeight,
        width: subWidth,
        height: subHeight
      });
      return this.nodes[3] = new QuadTree(this.level + 1, {
        x: x + subWidth,
        y: y + subHeight,
        width: subWidth,
        height: subHeight
      });
    };

    QuadTree.prototype._getIndex = function(rect) {
      var bottomQuadrant, horizontalMidpoint, index, topQuadrant, verticalMidpoint;
      index = -1;
      verticalMidpoint = this.bounds.x + (this.bounds.width / 2);
      horizontalMidpoint = this.bounds.y + (this.bounds.height / 2);
      topQuadrant = rect.y < horizontalMidpoint && rect.y + rect.height < horizontalMidpoint;
      bottomQuadrant = rect.y > horizontalMidpoint;
      if (rect.x < verticalMidpoint && rect.x + rect.width < verticalMidpoint) {
        if (topQuadrant) {
          index = 1;
        } else if (bottomQuadrant) {
          index = 2;
        }
      } else if (rect.x > verticalMidpoint) {
        if (topQuadrant) {
          index = 0;
        } else if (bottomQuadrant) {
          index = 3;
        }
      }
      return index;
    };

    QuadTree.prototype.insert = function(rect) {
      var i, index, results;
      if (this.nodes[0] !== void 0) {
        index = this._getIndex(rect);
        if (index !== -1) {
          this.nodes[index].insert(rect);
        }
      }
      this.objects.push(rect);
      if (this.objects.length > this._maxObjects && this.level < this._maxLevels) {
        if (this.nodes[0] === void 0) {
          this._split();
        }
        i = 0;
        results = [];
        while (i < this.objects.length) {
          index = this._getIndex(this.objects[i]);
          if (index !== -1) {
            this.nodes[index].insert(this.objects[i]);
            results.push(this.objects.splice(i, 1));
          } else {
            results.push(i++);
          }
        }
        return results;
      }
    };

    QuadTree.prototype.retrieve = function(list, rect) {
      var index;
      index = this._getIndex(rect);
      if (index !== -1 && this.nodes[0] !== void 0) {
        this.nodes[index].retrieve(list, rect);
      }
      list.push.apply(list, this.objects);
      return list;
    };

    window.QuadTree = QuadTree;

    return QuadTree;

  })();

}).call(this);

//# sourceMappingURL=quadtree.js.map
